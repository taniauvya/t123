{
  "info": {
    "_postman_id": "a8042f6f-2473-4ca6-ba63-5d7aa454afeb",
    "name": "sprint-14",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "access",
      "item": [
        {
          "name": "[-] [GET] Защита авторизацией",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 401\", () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата поля message\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")));\r",
                  "});"
                ]
              }
            }
          ],
          "id": "b9c3ca42-d5cd-4210-abd4-332f446852e1",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/users"
          },
          "response": []
        }
      ],
      "id": "7c710db7-1196-4b82-9c08-7147729fad64"
    },
    {
      "name": "signup",
      "item": [
        {
          "name": "[-] [POST] Добавление пользователя с полем name меньше 2 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "5433b692-5866-4353-97dd-e69e62a85c3e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя с полем name больше 30 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "a9480489-e5f0-41aa-8557-094c8afa257e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя с полем about меньше 2 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "85448483-6e33-471d-80b8-3b90c56abf4b",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomAlphaNumeric}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя с полем about больше 30 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "469957ca-9ec6-42af-ab50-7110de00b0b6",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{$randomLoremSentences}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя с некорректным url-адресом в поле avatar",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'avatar', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "6bf926a7-6861-4310-afd3-9da311428399",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar_incorrect}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя с некорректным email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "5352b147-99c0-415a-bc55-39388d3f5123",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email_incorrect}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя без обязательного поля email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1f50f85b-8df9-477e-898e-81769698a68c",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя без обязательного поля password",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'password', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "31b4801e-cedf-4e10-94c4-ed9d5f54ed24",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[+] [POST] Добавление пользователя без необязательных полей",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200 или 201\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе не содержится password созданного пользователя\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user).not.to.have.property('password');\r",
                  "});"
                ]
              }
            }
          ],
          "id": "722b11d7-fc68-4e59-8bc6-29ae16f76f6a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email_second}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[+] [POST] Добавление пользователя",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200 или 201\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе совпадают с переданными\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
                  "    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
                  "    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе не содержится password созданного пользователя\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user).not.to.have.property('password');\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "68b9569f-c19a-4b49-9fd2-f1ab8a9895c5",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "* Добавление доп. пользователя для теста добавления пользователя с существующим email в БД",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83d450e7-5b53-4a03-996f-33284f4a432d",
                "exec": [""],
                "type": "text/javascript"
              }
            }
          ],
          "id": "beccd7ba-24be-45d1-9972-7b1de8cdac6e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email_third}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление пользователя с существующим email в БД",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 409\", () => {\r",
                  "    pm.response.to.have.status(409);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата поля message\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
                  "});"
                ]
              }
            }
          ],
          "id": "539b8574-6ac2-4f19-9781-37e1e382ac88",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email_third}}\",\r\n    \"password\": \"{{user_password}}\",\r\n    \"name\": \"{{user_name}}\",\r\n    \"about\": \"{{user_about}}\",\r\n    \"avatar\": \"{{user_avatar}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signup"
          },
          "response": []
        }
      ],
      "id": "4db9a5f5-02ea-464f-a05b-61b69a043840"
    },
    {
      "name": "signin",
      "item": [
        {
          "name": "[-] [POST] Авторизация с несуществующими email и password в БД",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 401\", () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата поля message\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d5d49e70-8c88-4fad-8f21-d45b50694c84",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"test@test.ru\",\r\n    \"password\": \"12345678\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signin"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Авторизация с некорректным полем email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "944f48b2-011c-4d76-a51d-f8dac28aa9f0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email_incorrect}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signin"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Авторизация без обязательного поля email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'email', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "492f4944-66fc-4e9c-abfb-b6b7cc79071b",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"password\": \"{{user_password}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signin"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Авторизация без обязательного поля password",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'password', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ccc8ec97-53f6-4e05-97f5-c27ed03fd80e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signin"
          },
          "response": []
        },
        {
          "name": "[+] [POST] Авторизация",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "try {\r",
                  "    const regex = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\r",
                  "    const data = utils.getData(pm.response.json());\r",
                  "    const token = data.token || data[Object.keys(data)[0]];\r",
                  "    if(regex.test(token)) {\r",
                  "        tests[`Cервер вернул в теле ответа JWT-токен: ${token}`] = true\r",
                  "        pm.collectionVariables.set(\"jwt_token\", token);\r",
                  "    }\r",
                  "} catch (e) {\r",
                  "}"
                ]
              }
            }
          ],
          "id": "5fe60a40-6fd2-4e32-8d54-2e794a2337db",
          "protocolProfileBehavior": { "disabledSystemHeaders": {} },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signin"
          },
          "response": []
        }
      ],
      "id": "9adfe0d2-3a7a-4784-8ac4-b5f81c536500"
    },
    {
      "name": "users",
      "item": [
        {
          "name": "[+] [GET] Получение информации о пользователе",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.expect(pm.response.code).equals(200, \"Убедитесь, что сервер возвращает и принимает JWT-токен одинаково (при возврате cookies - сервер должен извлекать токен из них, если кук нет - из заголовков)\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата корректных данных\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
                  "    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
                  "    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
                  "    pm.expect(user.email).to.eql(pm.collectionVariables.get(\"user_email\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе отсутствует поле password\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user).not.to.have.property('password');\r",
                  "});"
                ]
              }
            }
          ],
          "id": "4d9d4a4b-e13e-4daa-b625-32f030c56628",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/users/me"
          },
          "response": []
        },
        {
          "name": "[+] [GET] Добавленному пользователю без необязательных полей, присвоены стандартные значения",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Полям name, about и avatar присвоены стандартные значения\", () => {\r",
                  "    const users = utils.getData(pm.response.json());\r",
                  "    const email = pm.collectionVariables.get(\"user_email_second\");\r",
                  "    const user = users?.find((item) => item.email === email);\r",
                  "    console.log(user);\r",
                  "\r",
                  "    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name_default\"));\r",
                  "    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about_default\"));\r",
                  "    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar_default\"));\r",
                  "});"
                ]
              }
            }
          ],
          "id": "63c577b5-eee5-4d3f-a543-8e4b4d1e9d8c",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/users"
          },
          "response": []
        },
        {
          "name": "[+] [GET] Получение списка пользователей",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка списка пользователей\", () => {\r",
                  "    const users = utils.getData(pm.response.json());\r",
                  "    pm.expect(users).to.be.an(\"array\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе отсутствует поле password\", () => {\r",
                  "    const users = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(users[0]).not.to.have.property('password');\r",
                  "});\r",
                  "\r",
                  "const users = utils.getData(pm.response.json());\r",
                  "const email = pm.collectionVariables.get(\"user_email\");\r",
                  "const user = users?.find((item) => item.email === email);\r",
                  "\r",
                  "pm.collectionVariables.set(\"user_id\", user._id);"
                ]
              }
            }
          ],
          "id": "536aadbe-72f4-492d-80d1-16d5b15a3079",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/users"
          },
          "response": []
        },
        {
          "name": "[+] [GET] Получение пользователя по id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе совпадают с данными добавленного пользователя\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name\"));\r",
                  "    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about\"));\r",
                  "    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе отсутствует поле password\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user).not.to.have.property('password');\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1c0fbe57-055b-47ba-b1d8-f58e8a4d9db3",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userid",
              "host": ["{{base_url}}"],
              "path": ["users", ":userid"],
              "variable": [
                {
                  "id": "aa047742-867e-42af-8405-07ecea18553f",
                  "key": "userid",
                  "value": "{{user_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[-] [GET] Получение пользователя с некорректным id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "16b2d54e-bf61-445e-b54b-d76ab62ac94f",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userid",
              "host": ["{{base_url}}"],
              "path": ["users", ":userid"],
              "variable": [
                {
                  "id": "029dbfd8-9833-4d52-b5b9-98cc1a2852cc",
                  "key": "userid",
                  "value": "text"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[-] [GET] Получение пользователя с несуществующим в БД userid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата поля message\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "b921f280-5081-4f92-809a-5d9701dbafe2",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:id",
              "host": ["{{base_url}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "id": "5331e5f3-50a4-4f6d-bbc1-d1590eba7e3a",
                  "key": "id",
                  "value": "{{user_id_const}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[+] [PATCH] Обновление данных пользователя",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе совпадают с данными обновленного пользователя\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user.name).to.eql(pm.collectionVariables.get(\"user_name_changed\"));\r",
                  "    pm.expect(user.about).to.eql(pm.collectionVariables.get(\"user_about_changed\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе отсутствует поле password\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user).not.to.have.property('password');\r",
                  "});"
                ]
              }
            }
          ],
          "id": "b5cecbcf-dfee-41e8-bc6f-80443549561f",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{   \r\n    \"name\": \"{{user_name_changed}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/users/me"
          },
          "response": []
        },
        {
          "name": "[-] [PATCH] Обновление данных пользователя с полем name меньше 2 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "776e8c86-ed13-4b68-8570-16a9db02103d",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{   \r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/users/me"
          },
          "response": []
        },
        {
          "name": "[-] [PATCH] Обновление данных пользователя с полем name больше 30 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "dfd7c1fa-aa1e-4508-9df7-a5a00ef62a2e",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{   \r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"about\": \"{{user_about_changed}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/users/me"
          },
          "response": []
        },
        {
          "name": "[-] [PATCH] Обновление данных пользователя с полем about меньше 2 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "47daef96-3dbb-4581-9247-a6cef88b0816",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{   \r\n    \"about\": \"{{$randomAlphaNumeric}}\",\r\n    \"name\": \"{{user_name_changed}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/users/me"
          },
          "response": []
        },
        {
          "name": "[-] [PATCH] Обновление данных пользователя с полем about больше 30 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'about', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1e615752-a4bc-4f63-a92b-80a09669be5c",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{   \r\n    \"about\": \"{{$randomLoremSentences}}\",\r\n    \"name\": \"{{user_name_changed}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/users/me"
          },
          "response": []
        },
        {
          "name": "[+] [PATCH] Обновление аватара пользователя",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Url-адрес аватара в ответе совпадает с url-адресом аватара в запросе\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "    \r",
                  "    pm.expect(user.avatar).to.eql(pm.collectionVariables.get(\"user_avatar_changed\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе не содержится password пользователя\", () => {\r",
                  "    const user = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(user).not.to.have.property('password');\r",
                  "});"
                ]
              }
            }
          ],
          "id": "6e68f977-c032-426b-9747-60ab2a8b2d50",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{   \r\n    \"avatar\": \"{{user_avatar_changed}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/users/me/avatar"
          },
          "response": []
        },
        {
          "name": "[-] [PATCH] Обновление аватара пользователя с некорректным url-адресом",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'avatar', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "4aa370f7-b92e-4bfd-8522-0bd1a2a74588",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{   \r\n    \"avatar\": \"{{user_avatar_incorrect}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/users/me/avatar"
          },
          "response": []
        }
      ],
      "id": "d4b99ca5-a938-42d0-a739-eb48f1d59681"
    },
    {
      "name": "cards",
      "item": [
        {
          "name": "[+] [POST] Добавление карточки",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200 или 201\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе содержится id созданной карточки\", () => {\r",
                  "    const card = utils.getData(pm.response.json());\r",
                  "\r",
                  "    pm.expect(card).to.have.property('_id');\r",
                  "\r",
                  "    pm.collectionVariables.set(\"card_id\", card._id);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1c86d866-8ffc-477e-9044-6b4db3ce8340",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление карточки с полем name меньше 2 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "78a14ca7-653d-4eed-b7c9-99612a7fb7cc",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{$randomAlphaNumeric}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление карточки с полем name больше 30 символов",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "63b7f1a4-704f-4e61-997c-26018dd5fcf2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{$randomLoremSentences}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление карточки с некорректным url-адресом в поле link",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'link', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "9219a1ee-57eb-4eae-95de-603cbb0af217",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link_incorrect}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление карточки без обязательного поля name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'name', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "750a0b1d-7777-474c-8070-f29cc28b3155",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"link\": \"{{card_link}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[-] [POST] Добавление карточки без обязательного поля link",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('body', 'link', pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "7eac9019-a59f-43e9-b706-57d8956e2167",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{card_name}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[+] [GET] Получение списка карточек",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка списка карточек\", () => {\r",
                  "    const response = utils.getData(pm.response.json());\r",
                  "    \r",
                  "    pm.expect(response).to.be.an(\"array\");\r",
                  "    pm.expect(response.length).not.to.equal(0);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1567128f-3938-49a5-94d4-d3d78ff72395",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[+] [PUT] Добавление лайка карточке",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200 или 201\", () => {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "0e097b48-0cff-49b6-90a8-f372f9adb394",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid/likes",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid", "likes"],
              "variable": [
                {
                  "id": "823c300e-7ebe-4a56-8c34-955581bb60ad",
                  "key": "cardid",
                  "value": "{{card_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[-] [PUT] Добавление лайка с некорректным id карточки",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "f7631c01-22e3-429b-8e80-58466757225b",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid/likes",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid", "likes"],
              "variable": [
                {
                  "id": "30150b0a-fd57-415f-9773-d385ce2f7b00",
                  "key": "cardid",
                  "value": "text"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[-] [PUT] Добавление лайка с несуществующим в БД id карточки",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 404\", () => {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата поля message\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "3c733645-1324-4fc0-9706-776514bb7fd4",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid/likes",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid", "likes"],
              "variable": [
                {
                  "id": "0ab34906-0880-4ccf-a0bd-540cfc7e12c0",
                  "key": "cardid",
                  "value": "{{user_id_const}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[-] [DELETE] Удаление лайка у карточки с некорректным id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "72e6dd7a-fa6d-4c96-ad25-c21c7bdcd228",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid/likes",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid", "likes"],
              "variable": [
                {
                  "id": "a8be4877-1517-4cc0-815a-ff6e079bc667",
                  "key": "cardid",
                  "value": "text"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[-] [DELETE] Удаление лайка у карточки с несуществующим в БД id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 404\", () => {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата поля message\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "6f621c5d-8124-4693-960f-220c0e22e8a0",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid/likes",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid", "likes"],
              "variable": [
                {
                  "id": "24460b8f-19cc-4892-9c6d-5567947ad0c7",
                  "key": "cardid",
                  "value": "{{user_id_const}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[+] [DELETE] Удаление лайка у карточки",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d5b92181-fe45-4f05-adc1-647209e60c77",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid/likes",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid", "likes"],
              "variable": [
                {
                  "id": "23ec036a-0ff8-4bf1-96db-04ae35d9c16a",
                  "key": "cardid",
                  "value": "{{card_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[+] [GET] Проверка отсутствия лайка у карточки после его удаления",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Удаленный лайк не должен присутствовать в карточке\", () => {\r",
                  "    const cards = utils.getData(pm.response.json());\r",
                  "    const userId = pm.collectionVariables.get(\"user_id\");\r",
                  "    const cardId = pm.collectionVariables.get(\"card_id\");\r",
                  "    const card = cards?.find((item) => item._id === cardId);\r",
                  "\r",
                  "    pm.expect(!!card?.likes?.includes(userId)).to.eq(false);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "f567b8a7-d833-4bad-9c66-91a43473d9d3",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[+] [DELETE] Удаление карточки",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "8efe6d67-8c97-4d46-b940-cfcfd256621e",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid"],
              "variable": [
                {
                  "id": "b2609830-7635-4272-9e46-a9646ce2837e",
                  "key": "cardid",
                  "value": "{{card_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[+] [GET] Проверка отсутствия удаленной карточки в БД",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Удаленной карточки не должно быть в БД\", () => {\r",
                  "    const cards = utils.getData(pm.response.json());\r",
                  "    const deletedId = pm.collectionVariables.get(\"card_id\");\r",
                  "    const hasCard = !!cards?.find((item) => item._id === deletedId);\r",
                  "\r",
                  "    pm.expect(hasCard).to.eq(false);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d7da490e-082f-4f9e-91a7-6029be51bc8b",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "[-] [DELETE] Удаление карточки с некорректным id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 400\", () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ошибка валидации поймана при помощи Joi\", () => {\r",
                  "    const schema = utils.generateSchemaValidationError('params', null, pm.response.json());\r",
                  "    pm.response.to.have.jsonSchema(schema);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "f61b8e84-129b-4057-8e7e-3965539a137c",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid"],
              "variable": [
                {
                  "id": "cc01617e-c77e-41db-abd6-64c5a04ea38d",
                  "key": "cardid",
                  "value": "text"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[-] [DELETE] Удаление карточки с несуществующим в БД id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 404\", () => {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Проверка возврата поля message\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")));\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "ebd231af-0d8c-4851-adaf-0d69cda9c75e",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid"],
              "variable": [
                {
                  "id": "e9d94c0b-b752-4418-9ead-2bd4c137ab34",
                  "key": "cardid",
                  "value": "{{user_id_const}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "* Добавление карточки",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const card = utils.getData(pm.response.json());\r",
                  "\r",
                  "pm.collectionVariables.set(\"card_id\", card._id);"
                ]
              }
            }
          ],
          "id": "1444ccf1-bda9-4a20-84c8-9e4aead3cffa",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{card_name}}\",\r\n    \"link\": \"{{card_link}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/cards"
          },
          "response": []
        },
        {
          "name": "* Авторизация другим пользователем",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try {\r",
                  "    const regex = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\r",
                  "    const data = utils.getData(pm.response.json());\r",
                  "    const token = data.token || data[Object.keys(data)[0]];\r",
                  "    if(regex.test(token)) {\r",
                  "        pm.collectionVariables.set(\"jwt_token\", token);\r",
                  "    }\r",
                  "} catch (e) {\r",
                  "}"
                ]
              }
            }
          ],
          "id": "375f2370-93c3-47b4-8602-d029d694fd92",
          "protocolProfileBehavior": { "disabledSystemHeaders": {} },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{user_email_third}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
              "options": { "raw": { "language": "json" } }
            },
            "url": "{{base_url}}/signin"
          },
          "response": []
        },
        {
          "name": "[-] [DELETE] Удаление карточки другого пользователя",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Код ответа равен 403\", function () {\r",
                  "    pm.response.to.have.status(403);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ea979d7a-40c4-4621-b0bd-4afdc9a1935e",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cards/:cardid",
              "host": ["{{base_url}}"],
              "path": ["cards", ":cardid"],
              "variable": [
                {
                  "id": "b2609830-7635-4272-9e46-a9646ce2837e",
                  "key": "cardid",
                  "value": "{{card_id}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "id": "0f7282b0-b291-488f-a850-5b05ce9109b7"
    },
    {
      "name": "[-] [PATCH] Обработка неправильного пути",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Код ответа равен 404\", () => {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "\r",
              "pm.test(\"Проверка возврата поля message\", () => {\r",
              "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"schema_message_only\")))\r",
              "});\r",
              ""
            ]
          }
        }
      ],
      "id": "e7c44718-26ca-467d-bafc-6ea69e0d6f02",
      "request": { "method": "PATCH", "header": [], "url": "{{base_url}}/404" },
      "response": []
    }
  ],
  "auth": { "type": "bearer", "bearer": { "token": "{{jwt_token}}" } },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "37edfa51-fc14-41ea-96c5-af23d077598f",
        "type": "text/javascript",
        "exec": [
          "const schemaMessageOnly = {",
          "    \"type\": \"object\",",
          "    \"properties\": {",
          "        \"message\": {",
          "            \"type\": \"string\",",
          "            \"minLength\": 1",
          "        }",
          "    },",
          "    \"required\": [\"message\"]",
          "};",
          "",
          "pm.collectionVariables.set(\"schema_message_only\", JSON.stringify(schemaMessageOnly));",
          "",
          "utils = {",
          "    getData: (jsonData) => {",
          "        if(Array.isArray(jsonData)) {",
          "            return jsonData;",
          "        }",
          "",
          "        const keys = Object.keys(jsonData);",
          "        const firstKey = keys[0];",
          "        const firstKeyValue = jsonData[firstKey];",
          "",
          "        return keys.length === 1 && typeof firstKeyValue === 'object' ? firstKeyValue : jsonData;",
          "    },",
          "    generateSchemaValidationError: (source, key, jsonData) => {",
          "        console.log(123123, jsonData);",
          "        const validationProps = {",
          "            properties: {",
          "                source: {",
          "                    type: \"string\",",
          "                    const: source",
          "                },",
          "                keys: {",
          "                    type: \"array\",",
          "                    items: [",
          "                        {",
          "                            type: \"string\"",
          "                        }",
          "                    ]",
          "                }",
          "            },",
          "            required: [\"source\", \"keys\"]",
          "        };",
          "",
          "        if(key !== null) {",
          "            validationProps.properties.keys.items[0].const = key;",
          "        } ",
          "        ",
          "        const schema = {",
          "            type: 'object',",
          "            properties: {",
          "                statusCode: {",
          "                    type: 'integer'",
          "                },",
          "                error: {",
          "                    type: \"string\",",
          "                    const: \"Bad Request\"",
          "                },",
          "                message: {",
          "                    type: \"string\",",
          "                    minLength: 1",
          "                },",
          "                validation: {",
          "                    type: \"object\",",
          "                }",
          "            },",
          "            required: [\"statusCode\", \"error\", \"message\"]",
          "        }",
          "        ",
          "        if(Object.keys(jsonData?.validation).length === 1) {",
          "            schema.properties.validation.properties = {",
          "                [source]: {",
          "                    type: \"object\",",
          "                    ...validationProps",
          "                }",
          "            }",
          "            schema.properties.validation.required = [source]",
          "        } else {",
          "            schema.properties.validation = {...schema.properties.validation, ...validationProps}",
          "        }",
          "        ",
          "        console.log(123200, schema);",
          "        return schema;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "baa71af7-5b2e-4466-8dcb-f40b11581973",
        "type": "text/javascript",
        "exec": [
          "pm.test(\"В ответе приходит JSON-объект\", () => {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "ddf0c735-cb4f-4d72-962c-51f04929d30f",
      "key": "base_url",
      "value": "http://localhost:3000"
    },
    {
      "id": "cd0b06a9-73f7-44d8-8f2d-1c6b35ea42c3",
      "key": "user_name",
      "value": "test"
    },
    {
      "id": "560402cd-df2b-4bd1-890a-50efaf096a4a",
      "key": "user_about",
      "value": "about"
    },
    {
      "id": "9e33b42f-26d7-4c8f-b768-e34f123b003e",
      "key": "user_avatar",
      "value": "https://ya.ru/av.bmp"
    },
    {
      "id": "207c0150-cc68-4d54-abce-6dbe5c3ded05",
      "key": "user_email",
      "value": "em@em.ru"
    },
    {
      "id": "20881098-0aeb-48aa-bc92-80c1bba9d3ba",
      "key": "user_email_second",
      "value": "em2@em2.ru"
    },
    {
      "id": "38f01876-ded8-4242-80a5-f75e1e483298",
      "key": "user_email_third",
      "value": "em3@em3.ru"
    },
    {
      "id": "da0b0b4b-bb6b-40d4-9a34-223d6ea9291a",
      "key": "user_password",
      "value": "longPass"
    },
    {
      "id": "4085370e-bbc5-4b1a-8c61-a25a95cf1030",
      "key": "user_id",
      "value": ""
    },
    {
      "id": "51d21ded-a84a-45b2-989c-2b9cf2ed0d26",
      "key": "user_id_const",
      "value": "61eade4c6d5acf558c42d9b8"
    },
    {
      "id": "c178c74b-2671-4e33-b0a0-bb6481531e24",
      "key": "user_name_default",
      "value": "Жак-Ив Кусто"
    },
    {
      "id": "724a90ac-9f85-4822-8ae8-d117010105a9",
      "key": "user_about_default",
      "value": "Исследователь"
    },
    {
      "id": "bad2edf5-0fd2-425b-b37f-41680d9c737e",
      "key": "user_avatar_default",
      "value": "https://pictures.s3.yandex.net/resources/jacques-cousteau_1604399756.png"
    },
    {
      "id": "4c362930-72f0-4ee7-b0e6-d74914b65ff4",
      "key": "user_name_changed",
      "value": "Обновленное имя"
    },
    {
      "id": "dfc461a5-6024-42a4-af44-dede347fbae1",
      "key": "user_about_changed",
      "value": "Обновленная информация о себе"
    },
    {
      "id": "52f80542-32cd-4e66-81ec-729db22e29a4",
      "key": "user_avatar_changed",
      "value": "https://ya.ru/av2.bmp"
    },
    {
      "id": "0ff86caf-46d3-485c-ba83-1162dc71c137",
      "key": "user_email_incorrect",
      "value": "test"
    },
    {
      "id": "96e6844a-d94f-4760-8419-f9a97629b216",
      "key": "user_name_incorrect",
      "value": "1"
    },
    {
      "id": "f501f9fc-baad-4008-b57d-5e1a1897acf7",
      "key": "user_about_incorrect",
      "value": "2"
    },
    {
      "id": "b3828c69-54e8-4f22-871a-60ba3a603bc1",
      "key": "user_avatar_incorrect",
      "value": "link:/link~!bad"
    },
    {
      "id": "e2d04c1f-7956-459a-b981-bcf277bbae88",
      "key": "card_name",
      "value": "testCard"
    },
    {
      "id": "af06e601-6924-437a-a76d-326b029f6659",
      "key": "card_link",
      "value": "https://ya.ru/link.test"
    },
    {
      "id": "6bfd1f53-bfc0-47d2-bf88-9f560ff991be",
      "key": "card_link_incorrect",
      "value": "link:/link~!bad"
    },
    {
      "id": "6d5f8463-4651-4dc3-8424-19d052482766",
      "key": "card_id",
      "value": ""
    },
    {
      "id": "8de92c62-aa1c-446b-8703-54adafa146a3",
      "key": "schema_message_only",
      "value": ""
    },
    {
      "id": "da02142f-500b-4587-8900-6ecc62443417",
      "key": "user_password_incorrect",
      "value": "short"
    },
    {
      "id": "2aac92fd-d450-4720-9bee-6214db58cece",
      "key": "jwt_token",
      "value": ""
    }
  ]
}
